@node linked-stack, contiguous-queue, Implementations, Implementations
@section linked-stack

@node linked-stack Overview, linked-stack API Reference, linked-stack, linked-stack
@subsection Overview

@code{linked-stack} is a linked-list based implementation of a stack, a last-in-first-out data structure.


@node linked-stack API Reference, linked-stack Examples, linked-stack Overview, linked-stack
@subsection API Reference

@menu
* Protocols Implemented: Protocols Implemented by linked-stack. :
* linked-stack?::
* make-linked-stack::
* linked-stack: linked-stack constructor. :
* linked-stack-copy::
* linked-stack-empty?::
* linked-stack-length::
* linked-stack-push!::
* linked-stack-pop!::
* linked-stack-top::
@end menu


@node Protocols Implemented by linked-stack, linked-stack?, , linked-stack API Reference
@comment node-name, next,          previous, up
@code{linked-stack} implements the @code{stack}, @code{collection}, @code{extendable},
@code{mutable}, and @code{enumerable}
protocols. @xref{stack}. @xref{collection}. @xref{extendable}. @xref{mutable}. @xref{enumerable}.


@node linked-stack?, make-linked-stack, Protocols Implemented by linked-stack, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack? object
@b{returns} a boolean indicating whether or not 
@code{object} is a linked-stack.
@end deffn

@node make-linked-stack, linked-stack constructor, linked-stack?, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} make-linked-stack 
@b{returns} a new empty @code{linked-stack}.
@end deffn


@node linked-stack constructor,linked-stack-copy, make-linked-stack, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack . items
@b{requires} items be a list of items to initialize the stack with. @* @*
@b{returns} a new @code{linked-stack} containing @code{items} pushed from right-to-left onto the stack. 
@end deffn

@node linked-stack-copy,linked-stack-empty?, linked-stack constructor, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-copy stack
@b{requires} @code{stack} be a @code{linked-stack}. @* @*
@b{returns} returns a shallow copy of @code{stack}. 
@end deffn

@node linked-stack-empty?,linked-stack-length, linked-stack-copy, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-empty? stack
@b{requires} @code{stack} be a @code{linked-stack}. @* @*
@b{returns} returns a boolean indicating whether or not the stack is empty. 
@end deffn

@node linked-stack-length,linked-stack-push!, linked-stack-empty?, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-length stack
@b{requires} @code{stack} be a @code{linked-stack}. @* @*
@b{returns} returns the number of items on the stack (i.e., length) . 
@end deffn

@node linked-stack-push!, linked-stack-pop!, linked-stack-length, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-push! stack item
@b{requires} @code{stack} be a @code{linked-stack} and item be an arbitrary object. @* @*
@b{modifies} @code{stack} by pushing item on the top of the stack. @* @*
@b{returns} returns @code{#unspecified}. 
@end deffn

@node linked-stack-pop!, linked-stack-top, linked-stack-push!, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-pop! stack
@b{requires} @code{stack} be a @code{linked-stack}. @* @*
@b{modifies} @code{stack} by removing the item on the top of the stack. @* @*
@b{returns} returns the item removed from @code{stack} or if @code{stack} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node linked-stack-top, , linked-stack-pop!, linked-stack API Reference
@comment node-name, next,          previous, up
@deffn {procedure} linked-stack-top stack
@b{requires} @code{stack} be a @code{linked-stack}. @* @*
@b{returns} returns the top item from @code{stack} or if @code{stack} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node linked-stack Examples,linked-stack API Reference, ,linked-stack
@subsection Examples

2 procedures are provided for creating a @code{linked-stack}: The first creates an empty stack and the other populates the stack with the items passed to it:

@smalllisp
(enumerable-collect (make-linked-stack)
   +list-collector+)
  @result{} ()

(enumerable-collect (linked-stack 1 2 3)
   +list-collector+)
  @result{} (1 2 3)
@end smalllisp

An item can be pushed onto the stack with @code{linked-stack-push!}:

@smalllisp
(let ((stack (linked-stack)))
   (linked-stack-push! stack 1)
   (linked-stack-top stack))
  @result{} 1
@end smalllisp

The top item of the stack can be non-destructively obtained with @code{linked-stack-top}:

@smalllisp
(let ((stack (linked-stack 1 2 3)))
   (linked-stack-top stack))
  @result{} 1
@end smalllisp

The top item can be removed from the stack with @code{linked-stack-pop!}:

@smalllisp
(let ((stack (linked-stack 1 2 3)))
   (linked-stack-pop! stack)
   (linked-stack-top stack))
  @result{} 2
@end smalllisp


To test if a stack is empty, use @code{linked-stack-empty?}:

@smalllisp
(linked-stack-empty? (linked-stack))
  @result{} #t

(linked-stack-empty? (linked-stack 1 2))
  @result{} #f
@end smalllisp


The size or length of a stack is obtained with @code{linked-stack-length}:

@smalllisp
(linked-stack-length (linked-stack 1 2))
  @result{} 2
@end smalllisp


To make a shallow copy a stack, use @code{linked-stack-copy}:

@smalllisp
(let* ((stack1 (linked-stack 1 2))
       (stack2 (linked-stack-copy stack1)))
    (eq? stack1 stack2))
  @result{} #f  
@end smalllisp

@code{linked-stack} also implements the @code{stack}, @code{collection}, @code{extendable},
@code{mutable}, and @code{enumerable}
protocols. @xref{stack Examples}. @xref{collection Examples}. @xref{extendable Examples}. @xref{mutable Examples}. @xref{enumerable Examples}.

