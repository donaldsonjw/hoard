@node ring-buffer, linked-deque, Implementations, Implementations
@section ring-buffer

@node ring-buffer Overview, ring-buffer API Reference, ring-buffer, ring-buffer
@subsection Overview
 @code{ring-buffer} is a fixed-size, sequential data structure supporting the efficient access, addition and removal of elements from both the front and back. It is commonly used to implement the queue and deque ADTs.
@node ring-buffer API Reference, ring-buffer Examples, ring-buffer Overview, ring-buffer
@subsection API Reference
@menu
* Protocols Implemented: Protocols Implemented by ring-buffer. :
* ring-buffer?::
* make-ring-buffer::
* ring-buffer: ring-buffer constructor. :
* ring-buffer-copy::
* ring-buffer-empty?::
* ring-buffer-length::
* ring-buffer-capacity::
* ring-buffer-front::
* ring-buffer-back::
* ring-buffer-pop-front!::
* ring-buffer-pop-back!::
* ring-buffer-push-front!::
* ring-buffer-push-back!::
@end menu

@node Protocols Implemented by ring-buffer, ring-buffer?, , ring-buffer API Reference
@comment node-name, next,          previous, up
@code{ring-buffer} implements the @code{queue}, @code{deque}, @code{collection}, @code{extendable},
@code{mutable}, and @code{enumerable}
protocols. @xref{queue}. @xref{deque}. @xref{collection}. @xref{extendable}. @xref{mutable}. @xref{enumerable}.

@node ring-buffer?, make-ring-buffer, Protocols Implemented by ring-buffer, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer? object
@b{returns} a boolean indicating whether or not 
@code{object} is a ring-buffer.
@end deffn

@node make-ring-buffer, ring-buffer constructor, ring-buffer?, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} make-ring-buffer :capacity
@b{returns} a new @code{ring-buffer} with a maximum capacity of @code{:capacity}.
@end deffn

@node ring-buffer constructor, ring-buffer-copy, make-ring-buffer, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer :capacity . items
@b{requires} @code{:capacity} be a positive integer specifying the maximum capacity of the ring-buffer and @code{items} be a list of items to initialize the ring-buffer with. @* @*
@b{returns} a new @code{ring-buffer} with a capacity of @code{:capacity} containing @code{items} pushed on the back from left-to-right. If the number of  @code{items} is greater than @code{:capacity}, @code{&invalid-argument-exeption} is thrown. 
@end deffn

@node ring-buffer-copy,ring-buffer-empty?, ring-buffer constructor, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-copy rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} a shallow copy of @code{rb}. 
@end deffn

@node ring-buffer-empty?, ring-buffer-length, ring-buffer-copy, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-empty? rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} a boolean indicating whether or not the ring-buffer is empty. 
@end deffn

@node ring-buffer-length, ring-buffer-capacity, ring-buffer-empty?, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-bufer-length rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} the size/length the ring-buffer. 
@end deffn

@node ring-buffer-capacity, ring-buffer-front, ring-buffer-empty?, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-capacity rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} the maximum size/length of @code{rb}. 
@end deffn

@node ring-buffer-front, ring-buffer-back, ring-buffer-capacity, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-front rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} the item at the front of the ring buffer or if @code{rb} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer-back, ring-buffer-pop-front!, ring-buffer-front, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-back rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{returns} the item at the back of the ring buffer or if @code{rb} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer-pop-front!, ring-buffer-pop-back!, ring-buffer-back, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-pop-front! rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{modifies} @code{rb} by removing the first item from the ring-buffer. @* @*
@b{returns} the item removed from the front of the ring buffer or if @code{rb} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer-pop-back!, ring-buffer-push-front!, ring-buffer-pop-front!, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-pop-back! rb
@b{requires} @code{rb} be a @code{ring-buffer}. @* @*
@b{modifies} @code{rb} by removing the back item from the ring-buffer. @* @*
@b{returns} the item removed from the back of the ring buffer or if @code{rb} is empty, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer-push-front!, ring-buffer-push-back!, ring-buffer-pop-back!, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-push-front! rb item
@b{requires} @code{rb} be a @code{ring-buffer} and @code{item} be an arbitrary object. @* @*
@b{modifies} @code{rb} by pushing @code{item} on the front of the ring-buffer. @* @*
@b{returns} @code{#unspecified} or if @code{rb} is full, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer-push-back!, , ring-buffer-pop-front!, ring-buffer API Reference
@comment node-name, next,          previous, up
@deffn {procedure} ring-buffer-push-back! rb item
@b{requires} @code{rb} be a @code{ring-buffer} and @code{item} be an arbitrary object. @* @*
@b{modifies} @code{rb} by pushing @code{item} on the back of the ring-buffer. @* @*
@b{returns} @code{#unspecified} or if @code{rb} is full, throws @code{&invalid-state-exception}. 
@end deffn

@node ring-buffer Examples,ring-buffer API Reference, ,ring-buffer
@subsection Examples

2 procedures are provided for creating a @code{ring-buffer}: The first creates an empty ring-buffer and the other populates the ring-buffer with the items passed to it:

@smalllisp
(enumerable-collect (make-ring-buffer :capacity 4)
   +list-collector+)
  @result{} ()

(enumerable-collect (ring-buffer :capacity 4 1 2 3)
   +list-collector+)
  @result{} (1 2 3)
@end smalllisp

An item can be placed onto the front or back of the ring-buffer with @code{ring-buffer-push-back!} and @code{ring-buffer-push-front!}:

@smalllisp
(let ((rb (ring-buffer :capacity 4 1 2 3)))
   (ring-buffer-push-back! rb 4)
   (ring-buffer-push-front! rb 0)
   (cons (ring-buffer-back rb)
     (ring-buffer-front rb)
  @result{} (4 . 0)
@end smalllisp

The first and last item of the ring-buffer can be non-destructively obtained with @code{ring-buffer-front} and @code{ring-buffer-back}, respecitvely:

@smalllisp
(let ((rb (ring-buffer :capacity 4 1 2 3)))
   (cons (ring-buffer-front rb)
     (ring-buffer-back rb))
  @result{} (1 . 3)
@end smalllisp

The first and last items can be removed from the ring-buffer with @code{ring-buffer-pop-front!} and @code{ring-buffer-pop-back!}, respecitvely:

@smalllisp
(let ((rb (ring-buffer :capacity 4 1 2 3)))
   (cons (ring-buffer-pop-front! rb)
     (ring-buffer-pop-back! rb))
  @result{} (1 . 3)
@end smalllisp


To test if a ring-buffer is empty, use @code{ring-buffer-empty?}:

@smalllisp
(ring-buffer-empty? (ring-buffer :capacity 4))
  @result{} #t

(ring-buffer-empty? (ring-buffer :capacity 4 1 2))
  @result{} #f
@end smalllisp


The size or length of a ring-buffer is obtained with @code{ring-buffer-length}:

@smalllisp
(ring-buffer-length (ring-buffer :capacity 4 1 2))
  @result{} 2
@end smalllisp

The capacity or maximum length of a ring-buffer is obtained with @code{ring-buffer-capacity}:

@smalllisp
(ring-buffer-capacity (ring-buffer-capacity :capacity 4 1 2))
  @result{} 4
@end smalllisp

To make a shallow copy a ring-buffer, use @code{ring-buffer-copy}:

@smalllisp
(let* ((rb1 (ring-buffer :capacity 4 1 2))
       (rb2 (ring-buffer-copy queue1)))
    (eq? rb1 rb2))
  @result{} #f  
@end smalllisp

@code{ring-buffer} also implements the @code{queue}, @code{deque}, @code{collection}, @code{extendable},
@code{mutable}, and @code{enumerable}
protocols. @xref{queue Examples}. @xref{deque Examples}. @xref{collection Examples}. @xref{extendable Examples}. @xref{mutable Examples}. @xref{enumerable Examples}.

